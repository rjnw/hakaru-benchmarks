fn s prob:
fn as array(prob):
fn z array(nat):
fn t array(real):
fn docUpdate nat:
if size(z) == size(t) &&
   docUpdate < size(z) &&
   z[docUpdate] < size(as):
  (array zNewd of size(as):
        real2prob
          (int2real
             (summary = rbucket
                          (0, size(t), rindex(: size(as), _a: z[_a], radd(_a, zNewd: 1)))
              nat2int(if zNewd == z[docUpdate]: 1 else: 0) * (-1)
              + nat2int(summary[zNewd]))
           + prob2real(as[zNewd]))
        * exp
            ((summate _a from 0 to size(as):
              (summary = rbucket
                           (0, size(t), rindex(: size(as), i: z[i], radd(i, _a: t[i])))
               (if _a == zNewd: t[docUpdate] else: +0/1)
               + (if _a == z[docUpdate]: t[docUpdate] else: +0/1) * (-1/1)
               + summary[_a]) ^
              2
              / (int2real
                   (summary = rbucket
                                (0, size(t), rindex(: size(as), i: z[i], radd(i, _a: 1)))
                    nat2int(if _a == zNewd: 1 else: 0)
                    + nat2int(if _a == z[docUpdate]: 1 else: 0) * (-1)
                    + nat2int(summary[_a]))
                 * prob2real(s ^ 2)
                 + (+1/1)))
             * prob2real(s ^ 2)
             * (+1/2))
        / sqrt
            (product _b from 0 to size(as):
             real2prob
               (int2real
                  (summary = rbucket
                               (0, size(t), rindex(: size(as), _a: z[_a], radd(_a, _b: 1)))
                   nat2int(if _b == zNewd: 1 else: 0)
                   + nat2int(if _b == z[docUpdate]: 1 else: 0) * (-1)
                   + nat2int(summary[_b]))
                * prob2real(s ^ 2)
                + (+1/1))))
else:
  if size(z) /= size(t): array i of 0: 0.0
  else:
    if size(z) <= docUpdate: array i of 0: 0.0
    else: array i of 0: 0.0

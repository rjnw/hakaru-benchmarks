## Latent Dirichlet Allocation
def dirichlet(as array(prob)):
    xs <~ plate i of int2nat(size(as)-1):
            beta(summate j from i+1 to size(as): as[j],
                 as[i])
    return array i of size(as):
             x = product j from 0 to i: xs[j]
             x * if i+1==size(as): 1 else: real2prob(1-xs[i])

def lda( topic_prior array(prob)
               , word_prior array(prob)
               , numDocs nat
               , doc array(nat) ):
  numWords = size(doc)
  numTopics = size(topic_prior)
  theta <~ plate d of numDocs:
    dirichlet(topic_prior)
  phi <~ plate k of numTopics:     # word dist for topic k
    dirichlet(word_prior)
  z <~ plate n of numWords:
    categorical(theta[doc[n]])
  w <~ plate n of numWords:
    categorical(phi[z[n]])
  return (w,z)

lda
